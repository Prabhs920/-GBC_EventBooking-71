version: '3.9'

services:
  # PostgreSQL service for RoomService
  postgres-db:
    image: postgres:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: room_service
    ports:
      - "5434:5432"
    networks:
      - spring-net

  # pgAdmin for managing PostgreSQL
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8082:80"
    networks:
      - spring-net

  # MongoDB service for BookingService and EventService
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - spring-net

  # Mongo Express for managing MongoDB
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb
    ports:
      - "8084:8081"
    networks:
      - spring-net

  # PostgreSQL service for UserService
  users-postgres-db:
    image: postgres:latest
    container_name: users-postgres-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pass
      POSTGRES_DB: user_service
    ports:
      - "5435:5432"  # Using a different port to avoid conflicts
    networks:
      - spring-net

  # BookingService
  booking-service:
    build:
      context: .
      dockerfile: ./BookingService/Dockerfile
    container_name: booking-service
    environment:
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: booking_service
    ports:
      - "8085:8080"
    depends_on:
      - mongodb
    networks:
      - spring-net
    command: ["java", "-jar", "/app/booking-service.jar"]

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:21.1.1
    container_name: keycloak
    environment:
      KC_DB: dev-mem
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8081:8080"
    command: start-dev
    networks:
      - spring-net

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - spring-net

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CREATE_TOPICS: "booking-events:1:1,event-registrations:1:1"
    networks:
      - spring-net



  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8083:8083"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8083
    networks:
      - spring-net


networks:
  spring-net:
    driver: bridge
